#!/usr/bin/env python3 -W ignore::DeprecationWarning
# -*- coding:utf8 -*-
import sys
import traceback
sys.path.append('../')
from util.sentence import *
from util.parse_json import *
from ask_func.generate_question import *
from ask_func.rank import *
from answer_func.answer_question import *
from ask_func.rank_questions import *

def main():
    article_file = sys.argv[1]
    nquestions = int(sys.argv[2])
    paragraphs = open_txt(article_file)
    sentences = tokenize_sentence(paragraphs)
    sentences = select_sentence(sentences, nquestions)
    
    y_n_list = []
    what_list = []
    who_list = []
    when_list = []
    where_list = []
    how_list = []
    for i in range(0, len(sentences)):
        sentence = sentences[i]
        senList = []
        try:
            sentence1 = extract_bracket(sentence)
            senList2 = []
            senList2 += break_simple_andbut(sentence1, 'but')
            for s in senList2:
                senList += break_simple_andbut(s, 'and')
        except:
            senList.append(sentence)

        dep_list, pcfg = stanford_parser(sentence)
        word_Pos, Pos_word, NER, dep_dict, doc = Spacy_parser(sentence)
        try:
            question, tag = create_YN(sentence, word_Pos, Pos_word, dep_dict, dep_list, pcfg)
            if question != '':
                question = format_question(question)
                y_n_list.append((question, tag))
        except:
            pass

        for sen in senList:
            # print(sen)
            if sen != sentence:
                pcfg = stanford_pcfg(sen)
            s = remove_clause(sen, pcfg)
            if s != sen:
                dep_list, pcfg = stanford_parser(s)
            elif s != sentence:
                dep_list = stanford_dep(s)

            if s != sentence:
                word_Pos, Pos_word, NER, dep_dict, doc = Spacy_parser(s)
			
            try:
                question = what_question(s, dep_list, pcfg, word_Pos, dep_dict, doc)
                if question != '':
                    question = format_question(question)
                    what_list.append(question)
            except:
                pass

            try:
                question = create_how(doc, s,dep_list)
                if question != '':
                    question = format_question(question)
                    how_list.append(question)
            except:
                pass

            try:
                questions = create_when(s, dep_list, pcfg, dep_dict, doc)
                if questions != []:
                    for qt in questions:
                        question = qt[0]
                        tag = qt[1]
                        qtype = qt[2]
                        question = format_question(question)
                        if qtype == 'Who':
                            who_list.append((question, tag))
                        elif qtype == 'When':
                            when_list.append((question, tag))
                        else:
                            where_list.append((question, tag))
            except:
                pass
    
    qList = []
    try:
        qList = question_rank(nquestions, y_n_list, what_list, who_list, when_list, where_list, how_list)
    except:
        qList = y_n_list + who_list + when_list + where_list + how_list + what_list
    
    number = min(nquestions, len(qList))
    for i in range(number):
        print(qList[i])
        
if __name__ == "__main__":
    main()